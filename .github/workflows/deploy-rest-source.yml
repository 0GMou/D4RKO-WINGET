name: Deploy WinGet REST source (d4rk0)

on:
  workflow_dispatch:
    inputs:
      source_name:
        description: "Nombre visible del origen (ej. d4rk0)"
        required: true
        type: string
        default: d4rk0
      resource_group:
        description: "Resource Group destino"
        required: true
        type: string
        default: rg-darko-winget
      region:
        description: "Azure region (ej. westeurope)"
        required: true
        type: string
        default: westeurope
      performance:
        description: "Developer | Basic | Enhanced (Developer = menor coste)"
        required: true
        type: choice
        options: [Developer, Basic, Enhanced]
        default: Developer
      publisher_name:
        description: "Nombre del publisher mostrado por el source"
        required: false
        type: string
        default: d4rk0
      publisher_email:
        description: "Email del publisher (opcional)"
        required: false
        type: string
        default: ""

permissions:
  contents: read

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (service principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Install WinGet REST module
        shell: pwsh
        run: |
          Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
          Install-Module -Name Microsoft.WinGet.RestSource -AllowPrerelease -Force

      - name: Ensure App Configuration is pass-through (idempotent)
        shell: bash
        run: |
          set -euo pipefail
          rg="${{ inputs.resource_group }}"
          loc="${{ inputs.region }}"
          name="${{ inputs.source_name }}"
          appcs="appcs-${name}"
          az appconfig show -g "$rg" -n "$appcs" >/dev/null 2>&1 || \
            az appconfig create -g "$rg" -n "$appcs" -l "$loc" --sku Free --arm-auth-mode pass-through
          az appconfig update -g "$rg" -n "$appcs" --arm-auth-mode pass-through

      - name: Deploy REST source (Functions + Cosmos)
        id: deploy
        shell: pwsh
        run: |
          Import-Module Microsoft.WinGet.RestSource
          $name  = "${{ inputs.source_name }}"
          $rg    = "${{ inputs.resource_group }}"
          $loc   = "${{ inputs.region }}"
          $perf  = "${{ inputs.performance }}"
          $pub   = "${{ inputs.publisher_name }}"
          $email = "${{ inputs.publisher_email }}"
          New-WinGetSource `
            -Name $name `
            -ResourceGroup $rg `
            -Region $loc `
            -ImplementationPerformance $perf `
            -PublisherName $pub `
            -PublisherEmail $email `
            -ShowConnectionInstructions `
            -InformationAction Continue -Verbose

      - name: Verify Cosmos Free Tier (fail if not free)
        shell: bash
        run: |
          set -euo pipefail
          rg="${{ inputs.resource_group }}"
          out="$(az cosmosdb list -g "$rg" --query "[].{name:name,free:enableFreeTier}" -o tsv)"
          [ -z "$out" ] && { echo "No Cosmos DB accounts found in $rg"; exit 1; }
          echo "$out"
          echo "$out" | awk '{print $2}' | grep -q "false" && { echo "Cosmos DB NOT in Free Tier. Aborting to avoid charges."; exit 1; }
          echo "Cosmos DB Free Tier OK"

      - name: Cap Application Insights to 0.1 GB/day
        shell: pwsh
        run: |
          Install-Module Az.ApplicationInsights -Force
          $rg = "${{ inputs.resource_group }}"
          $apps = Get-AzApplicationInsights -ResourceGroupName $rg
          if ($apps) {
            foreach ($a in $apps) {
              Set-AzApplicationInsightsDailyCap -ResourceGroupName $rg -Name $a.Name -DailyCapGB 0.1 -DisableNotificationWhenHitCap
            }
          }

      - name: Show winget add command
        shell: bash
        run: |
          set -euo pipefail
          rg="${{ inputs.resource_group }}"
          name="${{ inputs.source_name }}"
          host="$(az functionapp list -g "$rg" --query "[?contains(name,'$name')].defaultHostName" -o tsv | head -n1)"
          if [ -z "$host" ]; then
            host="$(az webapp list -g "$rg" --query "[?contains(name,'$name')].{h:defaultHostName}" -o tsv | head -n1)"
          fi
          if [ -n "$host" ]; then
            echo "winget source add -n ${name} -t Microsoft.Rest -a https://${host}/winget/"
          else
            echo "No function host found. Check previous step logs."
          }
