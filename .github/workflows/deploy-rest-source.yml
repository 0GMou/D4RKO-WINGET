name: Deploy WinGet REST source (d4rk0)

on:
  workflow_dispatch:
    inputs:
      source_name:
        description: "Visible source name"
        required: true
        default: d4rk0
      resource_group:
        description: "Target Resource Group"
        required: true
        default: rg-darko-winget
      region:
        description: "Azure region (e.g. westeurope)"
        required: true
        default: westeurope
      performance:
        description: "ImplementationPerformance: Developer | Basic | Enhanced"
        required: true
        default: Developer
      publisher_name:
        description: "Publisher shown by the source"
        required: true
        default: d4rk0

permissions:
  contents: read

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Preflight - required secrets and subscription
        shell: bash
        env:
          PUBLISHER_EMAIL: ${{ secrets.PUBLISHER_EMAIL }}
        run: |
          set -euo pipefail
          if [ -z "${PUBLISHER_EMAIL:-}" ]; then
            echo "Missing secret: PUBLISHER_EMAIL"
            exit 1
          fi
          az account show --query id -o tsv >/dev/null

      - name: Preflight - providers registered
        shell: bash
        run: |
          set -euo pipefail
          need="Microsoft.Web Microsoft.DocumentDB Microsoft.Storage Microsoft.Insights Microsoft.OperationalInsights Microsoft.KeyVault Microsoft.AppConfiguration Microsoft.ApiManagement"
          for ns in $need; do
            st=$(az provider show -n "$ns" --query registrationState -o tsv || true)
            if [ "$st" != "Registered" ]; then
              echo "Provider not registered: $ns (state=$st)"
              exit 1
            fi
          done

      - name: Preflight - Cosmos Free Tier already used?
        shell: bash
        run: |
          set -euo pipefail
          used=$(az cosmosdb list --query "[?enableFreeTier==\`true\`].[name]" -o tsv | wc -l | tr -d ' ')
          if [ "$used" -gt 0 ] && [ "${{ inputs.performance }}" = "Developer" ]; then
            echo "A Cosmos Free Tier account already exists in this subscription. Use 'Basic' or another subscription."
            exit 1
          fi

      - name: Install WinGet REST module
        shell: pwsh
        run: |
          Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
          Install-Module -Name Microsoft.WinGet.RestSource -AllowPrerelease -Force

      - name: Ensure App Configuration pass-through
        shell: bash
        run: |
          set -euo pipefail
          rg="${{ inputs.resource_group }}"
          loc="${{ inputs.region }}"
          name="${{ inputs.source_name }}"
          appcs="appcs-${name}"
          az appconfig show -g "$rg" -n "$appcs" >/dev/null 2>&1 || \
            az appconfig create -g "$rg" -n "$appcs" -l "$loc" --sku Free --arm-auth-mode pass-through
          az appconfig update -g "$rg" -n "$appcs" --arm-auth-mode pass-through

      - name: Deploy REST source (Functions + Cosmos)
        shell: pwsh
        env:
          SOURCE_NAME: ${{ inputs.source_name }}
          AZ_RESOURCE_GROUP: ${{ inputs.resource_group }}
          AZ_REGION: ${{ inputs.region }}
          PERF: ${{ inputs.performance }}
          PUBLISHER_NAME: ${{ inputs.publisher_name }}
          PUBLISHER_EMAIL: ${{ secrets.PUBLISHER_EMAIL }}
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Get-Module -ListAvailable Microsoft.WinGet.RestSource)) {
            Install-Module Microsoft.WinGet.RestSource -Scope CurrentUser -Force -AllowPrerelease
          }
          $max = 5
          for ($i = 1; $i -le $max; $i++) {
            try {
              New-WinGetSource `
                -Name "$env:SOURCE_NAME" `
                -ResourceGroup "$env:AZ_RESOURCE_GROUP" `
                -Region "$env:AZ_REGION" `
                -ImplementationPerformance "$env:PERF" `
                -PublisherName "$env:PUBLISHER_NAME" `
                -PublisherEmail "$env:PUBLISHER_EMAIL" `
                -ShowConnectionInstructions `
                -InformationAction Continue `
                -Verbose
              break
            } catch {
              if ($i -eq $max) { throw }
              Start-Sleep -Seconds (30 * $i)
            }
          }

      - name: Verify Cosmos Free Tier result
        shell: bash
        run: |
          set -euo pipefail
          rg="${{ inputs.resource_group }}"
          list=$(az cosmosdb list -g "$rg" --query "[].{name:name,free:enableFreeTier}" -o tsv)
          if [ -z "$list" ]; then
            echo "No Cosmos DB found in RG (deploy may have failed earlier)."
            exit 1
          fi
          echo "$list" | awk '{print $1" freeTier="$2}'
          echo "$list" | awk '{print $2}' | grep -q "true" || { echo "Cosmos DB in RG is not Free Tier"; exit 1; }

      - name: Cap Application Insights to 0.1 GB/day
        shell: pwsh
        run: |
          Install-Module Az.ApplicationInsights -Force
          $rg = "${{ inputs.resource_group }}"
          $apps = Get-AzApplicationInsights -ResourceGroupName $rg
          if ($apps) {
            foreach ($a in $apps) {
              Set-AzApplicationInsightsDailyCap -ResourceGroupName $rg -Name $a.Name -DailyCapGB 0.1 -DisableNotificationWhenHitCap
            }
          }

      - name: Show winget add command
        shell: pwsh
        run: |
          $rg = "${{ inputs.resource_group }}"
          $name = "${{ inputs.source_name }}"
          $apim = az apim list -g $rg --query "[?contains(name,'$name')][0].gatewayUrl" -o tsv
          if (-not $apim) { $apim = az apim list -g $rg --query "[0].gatewayUrl" -o tsv }
          if ($apim) {
            Write-Host "winget source add -n $name -t Microsoft.Rest -a $apim/winget/"
          } else {
            Write-Host "No APIM found"
          }
